---
title: Habitat - Demo - Discover the Supervisor
description: The “Try Habitat” is an interactive, in-browser demo that walks you through how to install, configure, and run packages in Habitat.
step: 2
total_steps: 6
---
h2.page-body--title Join services together

p
  | Supervisors can manage their applications in isolation, but the real power of 
    supervisors come when they are networked together. The way they do that is by 
    connecting to each other via an IP address and forming a "ring" of two or more supervisors 
    (although it is more like a peer-to-peer network rather than a circular ring).

p 
  | When supervisors are connected in this way, they start sharing information amongst themselves,
    such as membership metadata and configuration settings. Having your applications automatically discover 
    dependent services and configure themselves accordingly is useful if you have ever had to setup
    connection information between tiers in a web application. Habitat does this by sharing any exposed
    configuration values with other members of the ring.

p
  | In our example, the PostgreSQL database service exposes a port number that the Ruby-on-Rails web application
    needs in order to connect to the database. To set up databinding between the Ruby-on-Rails frontend and 
    the PostgreSQL backend, you will restart the rails app, but this time specifying the IP address of the 
    supervisor managing the backend and setting the <code>bind</code> argument to the service group name of the database. 
    This will allow you your Ruby-on-Rails app to use that port number when it initializes itself and tries to 
    connect to the database.

code
  | hab start example/ruby-rails-sample --peer 172.17.0.2 --bind database:postgresql.default

p    
  | What's a service group? Within a ring, services of the same type can form groups. This is useful 
    when new configuration data and files must be shared with all members of a given type who are in 
    a particular group. And to join the ring, you must specify the IP address of one other supervisor 
    within the ring. 

.window-buttons
  ul
    li
      a.button.secondary.active data-target="window-node-1" Ruby-on-Rails 
    li
      a.button.secondary data-target="window-node-2" PostgreSQL

#window-node-1.window-node
= partial "partials/terminal" do

#success
  p
    | The databinding has been set, but the frontend still cannot connect to the backend database. This is 
      because our Ruby-on-Rails frontend application has a default configuration value that must be changed
      before it is allowed to complete initialization.  

      
  = partial "partials/advance_button" do
      | Next - Dynamically configure your service

= link_to "/try/", :class => "back-link" do
  | Back to previous step
