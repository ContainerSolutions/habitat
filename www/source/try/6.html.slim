---
title: Habitat - Demo - Checking the Health of your Service
description: The “Try Habitat” is an interactive, in-browser demo that walks you through how to install, configure, and run packages in Habitat.
step: 6
total_steps: 6
---
h2.page-body--title Checking the Health of your Service

p
  | Habitat provides a consistent interface for retrieving the status of your running services from the command line 
    and through an HTTP API that you can call when directly connecting to a service instance.
   
    You can query the status of all services currently loaded or running under the local supervisor using the 
    <code>hab sup status</code> command. This command will list all persistent services loaded by the 
    supervisor along with their current state. It will also list transient services that are currently 
    running or in a starting or restarting state. 

p
  | To retrieve status for an individual service, specify the origin and package name in the 
    <code>hab sup status</code> subcommand. In this demo, you can check the status of either the 
    <code>core/postgresql</code> or <code>example/myrubyapp</code>. 

code
  | hab sup status core/postgresql

code
  | hab sup status example/myrubyapp

p
  | In addition to retrieving general status information about a service, the supervisor also exposes 
    the status of its services' health and other information through an HTTP API endpoint. This information 
    can be useful in monitoring service health, results of leader elections, and so on. 
    
p
  | In our example, you will use <code>curl</code> to connect to the supervisor of either running 
    service using the following syntax. Again, 

code 
  | curl http://172.17.0.2:9631/services/postgresql/default/health

p 
  | To retrieve the health status of the Ruby-on-Rails running service, enter the following:

code
  | curl http://172.17.0.3:9631/services/myrubyapp/default/health

= partial "partials/terminal" do

#success
  = partial "partials/advance_button" do
    | Next - Review

= partial "partials/previous_button" do
  | Back to previous step
